general:
  project_name: "Tesseract"
  model: "shap-e"
  base_model : "text300M"
  transmitter : "transmitter"
  seed: 42

device:
  use_cuda: true
  fallback_to_cpu: true

diffusion:
  config_type: "diffusion"

latents:
  batch_size: 1  # Number of 3D shapes to generate per prompt (higher = more outputs, more VRAM used)
  guidance_scale: 12.0  # Controls prompt adherence (higher = more faithful to prompt, lower = more creative)
  use_fp16: true  # Enables half-precision for reduced memory usage (recommended for most GPUs)
  use_karras: true  # Uses Karras noise schedule for more stable, high-quality generation
  karras_steps: 15  # Number of denoising steps when using Karras (more steps = smoother results, longer generation time)
  clip_denoised: true  # Prevents over-saturation/artifacts by clamping values to valid range
  progress: true  # Displays a live progress bar during generation (useful in CLI or notebooks)
  sigma_min: 1e-3  # Minimum noise level during diffusion (too low can cause oversharpening)
  sigma_max: 160  # Maximum noise level (higher = more noise, but more generative diversity)
  s_churn: 0.0  # Adds stochasticity during sampling (non-zero = more variety, but possibly less stable)

# Notes:
# - guidance_scale: [1.0 - 20.0+] → ↑ = more accurate, ↓ = more diverse/creative
# - batch_size: ↑ = more shapes per run, but ↑ VRAM and time
# - karras_steps: [32–128+] → ↑ = slower but cleaner meshes
# - sigma_min/sigma_max: tuning affects detail vs. noise tradeoff
# - s_churn: [0.0–10.0] → ↑ = more randomness/diversity


files:
 output_dir : "tesseract/outputs"
 base_file : "generated_mesh"
 default_format : ['ply']

render:
  render_mode : 'nerf'
  size : 64
  render : false
